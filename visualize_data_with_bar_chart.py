# -*- coding: utf-8 -*-
"""Visualize_Data_with_Bar_Chart.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15O-tHjSveFNCfeWBOVivWSBdNKi2ikYW
"""

from IPython.core.display import HTML
HTML("""
html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>US GDP Bar Chart</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            display: flex;
            justify-content: center;
            background-color: #f0f0f0;
            color: #333;
        }

        .container {
            background-color: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            border-radius: 5px;
            margin-top: 20px;
        }

        #title {
            text-align: center;
            font-size: 24px;
            margin-bottom: 20px;
        }

        .bar {
            fill: #4682b4;
            transition: fill 0.3s;
        }

        .bar:hover {
            fill: #2a5a8a;
        }

        #tooltip {
            position: absolute;
            padding: 10px;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            border-radius: 5px;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .tick text {
            font-size: 12px;
        }

        .x-axis-label, .y-axis-label {
            font-size: 14px;
            text-anchor: middle;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 id="title">United States GDP</h1>
        <div id="chart"></div>
    </div>

    <script>
        // Option 1: If you're using a local server, use the relative path
        // fetch('abc.json')

        // Option 2: If you're not using a local server, you can use the FreeCodeCamp data
        fetch('https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json')
            .then(response => response.json())
            .then(data => {
                const dataset = data.data;

                // Set dimensions and margins
                const margin = {top: 40, right: 40, bottom: 60, left: 80};
                const width = 800 - margin.left - margin.right;
                const height = 500 - margin.top - margin.bottom;

                // Create SVG element
                const svg = d3.select("#chart")
                    .append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", `translate(${margin.left}, ${margin.top})`);

                // Create tooltip
                const tooltip = d3.select("body")
                    .append("div")
                    .attr("id", "tooltip")
                    .style("opacity", 0);

                // Parse dates and values
                const parseDate = d3.timeParse("%Y-%m-%d");
                const dates = dataset.map(d => parseDate(d[0]));
                const gdpValues = dataset.map(d => d[1]);

                // Set scales
                const xScale = d3.scaleTime()
                    .domain([d3.min(dates), d3.max(dates)])
                    .range([0, width]);

                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(gdpValues)])
                    .range([height, 0]);

                // Create axes
                const xAxis = d3.axisBottom(xScale);
                const yAxis = d3.axisLeft(yScale);

                // Add x-axis
                svg.append("g")
                    .attr("id", "x-axis")
                    .attr("transform", `translate(0, ${height})`)
                    .call(xAxis);

                // Add y-axis
                svg.append("g")
                    .attr("id", "y-axis")
                    .call(yAxis);

                // Add x-axis label
                svg.append("text")
                    .attr("class", "x-axis-label")
                    .attr("x", width / 2)
                    .attr("y", height + margin.bottom - 10)
                    .text("Year");

                // Add y-axis label
                svg.append("text")
                    .attr("class", "y-axis-label")
                    .attr("transform", "rotate(-90)")
                    .attr("x", -height / 2)
                    .attr("y", -margin.left + 20)
                    .text("Gross Domestic Product (Billions of USD)");

                // Calculate bar width
                const barWidth = width / dataset.length;

                // Create bars
                svg.selectAll(".bar")
                    .data(dataset)
                    .enter()
                    .append("rect")
                    .attr("class", "bar")
                    .attr("x", (d, i) => xScale(parseDate(d[0])))
                    .attr("y", d => yScale(d[1]))
                    .attr("width", barWidth)
                    .attr("height", d => height - yScale(d[1]))
                    .attr("data-date", d => d[0])
                    .attr("data-gdp", d => d[1])
                    .on("mouseover", function(event, d) {
                        // Format date for display
                        const date = new Date(d[0]);
                        const year = date.getFullYear();
                        const quarter = Math.floor(date.getMonth() / 3) + 1;

                        // Format GDP with commas
                        const formattedGDP = d[1].toLocaleString();

                        // Show tooltip
                        tooltip.style("opacity", 0.9)
                            .attr("data-date", d[0])
                            .html(`${year} Q${quarter}<br>$${formattedGDP} Billion`)
                            .style("left", (event.pageX + 10) + "px")
                            .style("top", (event.pageY - 28) + "px");
                    })
                    .on("mouseout", function() {
                        tooltip.style("opacity", 0);
                    });
            })
            .catch(error => console.error('Error fetching data:', error));
    </script>
</body>
</html>
""")